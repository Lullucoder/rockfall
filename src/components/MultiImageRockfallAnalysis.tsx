import React, { useState } from 'react';
import { Upload, Camera, AlertTriangle, FileImage, Loader2, CheckCircle, X, Download, Copy, Eye, FileText } from 'lucide-react';
import { analyzeMultipleImages, analyzeRockfallRisk } from '../ai/geminiService';
import { EnhancedReportGenerator } from './EnhancedReportGenerator';

interface MultiImageAnalysisProps {
  onAnalysisComplete?: (result: string) => void;
}

interface ImageFile {
  file: File;
  preview: string;
  id: string;
}

export const MultiImageRockfallAnalysis: React.FC<MultiImageAnalysisProps> = ({ onAnalysisComplete }) => {
  const [images, setImages] = useState<ImageFile[]>([]);
  const [loading, setLoading] = useState(false);
  const [analysis, setAnalysis] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [analysisType, setAnalysisType] = useState<'detailed' | 'quick'>('detailed');
  const [selectedImagePreview, setSelectedImagePreview] = useState<string | null>(null);
  const [showReportGenerator, setShowReportGenerator] = useState(false);

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = Array.from(e.target.files || []);
    
    selectedFiles.forEach(file => {
      if (file && file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const newImage: ImageFile = {
            file,
            preview: e.target?.result as string,
            id: Math.random().toString(36).substr(2, 9)
          };
          setImages(prev => [...prev, newImage]);
        };
        reader.readAsDataURL(file);
      }
    });
    
    setAnalysis(null);
    setError(null);
  };

  const removeImage = (id: string) => {
    setImages(prev => prev.filter(img => img.id !== id));
  };

  const handleAnalyze = async () => {
    if (images.length === 0) return;
    
    setLoading(true);
    setError(null);
    
    try {
      let result: string;
      
      if (images.length === 1) {
        result = await analyzeRockfallRisk(images[0].file, analysisType);
      } else {
        result = await analyzeMultipleImages(images.map(img => img.file), analysisType);
      }
      
      setAnalysis(result);
      onAnalysisComplete?.(result);
    } catch (err: any) {
      setError(err.message || 'Analysis failed');
    } finally {
      setLoading(false);
    }
  };

  const getRiskLevel = (text: string): string => {
    const upper = text.toLowerCase();
    if (upper.includes('critical')) return 'critical';
    if (upper.includes('high')) return 'high';
    if (upper.includes('medium') || upper.includes('moderate')) return 'medium';
    return 'low';
  };

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'critical': return 'text-red-600 bg-red-50 border-red-200';
      case 'high': return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'low': return 'text-green-600 bg-green-50 border-green-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const exportReport = () => {
    if (!analysis) return;
    
    const reportContent = `
ROCKFALL RISK ANALYSIS REPORT
Generated: ${new Date().toLocaleString()}
Analysis Type: ${analysisType.toUpperCase()}
Images Analyzed: ${images.length}

Image Files:
${images.map((img, index) => `${index + 1}. ${img.file.name} (${(img.file.size / 1024 / 1024).toFixed(2)} MB)`).join('\n')}

ANALYSIS RESULTS:
${analysis}

---
Report generated by AI-Based Rockfall Prediction System
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `rockfall-analysis-${new Date().toISOString().split('T')[0]}-${images.length}-images.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center space-x-3">
        <div className="p-2 bg-navy-100 rounded-lg">
          <Camera className="w-6 h-6 text-navy-600" />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-900">Multi-Image AI Rockfall Risk Analysis</h3>
          <p className="text-sm text-gray-600">Upload multiple slope images for comprehensive geological assessment and comparison</p>
        </div>
      </div>

      {/* Analysis Type Selection */}
      <div className="flex space-x-4">
        <label className="flex items-center space-x-2 cursor-pointer">
          <input
            type="radio"
            value="quick"
            checked={analysisType === 'quick'}
            onChange={(e) => setAnalysisType(e.target.value as 'quick')}
            className="text-navy-600"
          />
          <span className="text-sm">Quick Assessment (30-60s)</span>
        </label>
        <label className="flex items-center space-x-2 cursor-pointer">
          <input
            type="radio"
            value="detailed"
            checked={analysisType === 'detailed'}
            onChange={(e) => setAnalysisType(e.target.value as 'detailed')}
            className="text-navy-600"
          />
          <span className="text-sm">Detailed Analysis (60-120s)</span>
        </label>
      </div>

      {/* File Upload Area */}
      <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-navy-400 transition-colors">
        <input
          type="file"
          accept="image/*"
          multiple
          onChange={handleFileSelect}
          className="hidden"
          id="image-upload"
        />
        <label htmlFor="image-upload" className="cursor-pointer">
          <div className="space-y-4">
            <div className="mx-auto w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center">
              <Upload className="w-6 h-6 text-gray-600" />
            </div>
            <div>
              <p className="text-lg font-medium text-gray-900">Upload slope images</p>
              <p className="text-sm text-gray-600">
                Select multiple images: drone photos, bench images, slope photographs (PNG, JPG, JPEG)
              </p>
              <p className="text-xs text-gray-500 mt-1">
                Tip: Upload images from different angles and time periods for better analysis
              </p>
            </div>
          </div>
        </label>
      </div>

      {/* Image Gallery */}
      {images.length > 0 && (
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h4 className="font-medium text-gray-900">Selected Images ({images.length})</h4>
            <button
              onClick={() => setImages([])}
              className="text-sm text-gray-500 hover:text-gray-700"
            >
              Clear All
            </button>
          </div>
          
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {images.map((image) => (
              <div key={image.id} className="relative group">
                <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                  <img
                    src={image.preview}
                    alt={image.file.name}
                    className="w-full h-full object-cover"
                  />
                </div>
                
                <div className="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center space-x-2">
                  <button
                    onClick={() => setSelectedImagePreview(image.preview)}
                    className="p-2 bg-white bg-opacity-20 rounded-full hover:bg-opacity-30"
                  >
                    <Eye className="w-4 h-4 text-white" />
                  </button>
                  <button
                    onClick={() => removeImage(image.id)}
                    className="p-2 bg-white bg-opacity-20 rounded-full hover:bg-opacity-30"
                  >
                    <X className="w-4 h-4 text-white" />
                  </button>
                </div>
                
                <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-75 text-white p-1 rounded-b-lg">
                  <p className="text-xs truncate">{image.file.name}</p>
                </div>
              </div>
            ))}
          </div>
          
          <button
            onClick={handleAnalyze}
            disabled={loading}
            className="w-full py-3 px-4 bg-navy-600 text-white rounded-lg hover:bg-navy-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
          >
            {loading ? (
              <>
                <Loader2 className="w-4 h-4 animate-spin" />
                <span>
                  Analyzing {images.length} image{images.length > 1 ? 's' : ''}... 
                  ({analysisType === 'detailed' ? 'Detailed' : 'Quick'} Mode)
                </span>
              </>
            ) : (
              <>
                <FileImage className="w-4 h-4" />
                <span>
                  Analyze {images.length} Image{images.length > 1 ? 's' : ''} for Rockfall Risk
                </span>
              </>
            )}
          </button>
        </div>
      )}

      {/* Error Display */}
      {error && (
        <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center space-x-2">
            <AlertTriangle className="w-4 h-4 text-red-600" />
            <span className="text-sm text-red-700">{error}</span>
          </div>
        </div>
      )}

      {/* Analysis Results */}
      {analysis && (
        <div className="space-y-4">
          <div className="flex items-center space-x-2">
            <CheckCircle className="w-5 h-5 text-green-600" />
            <h4 className="font-semibold text-gray-900">
              Multi-Image Analysis Complete ({images.length} image{images.length > 1 ? 's' : ''})
            </h4>
          </div>
          
          {/* Risk Level Badge */}
          <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${getRiskColor(getRiskLevel(analysis))}`}>
            Overall Risk Level: {getRiskLevel(analysis).toUpperCase()}
          </div>

          {/* Analysis Content */}
          <div className="bg-gray-50 border rounded-lg p-4">
            <div className="prose prose-sm max-w-none">
              <pre className="whitespace-pre-wrap text-sm text-gray-700 font-sans leading-relaxed">
                {analysis}
              </pre>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-wrap gap-3">
            <button
              onClick={() => navigator.clipboard.writeText(analysis)}
              className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 text-sm"
            >
              <Copy className="w-4 h-4" />
              <span>Copy Report</span>
            </button>
            <button
              onClick={exportReport}
              className="flex items-center space-x-2 px-4 py-2 bg-navy-100 text-navy-700 rounded-lg hover:bg-navy-200 text-sm"
            >
              <Download className="w-4 h-4" />
              <span>Download Report</span>
            </button>
            <button
              onClick={() => setShowReportGenerator(true)}
              className="flex items-center space-x-2 px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 text-sm"
            >
              <FileText className="w-4 h-4" />
              <span>Generate PDF Report</span>
            </button>
          </div>
        </div>
      )}

      {/* Image Preview Modal */}
      {selectedImagePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="relative max-w-4xl max-h-full">
            <img
              src={selectedImagePreview}
              alt="Preview"
              className="max-w-full max-h-full object-contain"
            />
            <button
              onClick={() => setSelectedImagePreview(null)}
              className="absolute top-4 right-4 p-2 bg-black bg-opacity-50 text-white rounded-full hover:bg-opacity-70"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
        </div>
      )}

      {/* Enhanced Report Generator Modal */}
      {showReportGenerator && analysis && (
        <EnhancedReportGenerator
          reportData={{
            analysis,
            images,
            analysisType,
            riskLevel: getRiskLevel(analysis),
            timestamp: new Date()
          }}
          onClose={() => setShowReportGenerator(false)}
        />
      )}

      {/* Enhanced Tips */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h5 className="font-medium text-blue-900 mb-2">Tips for Multi-Image Analysis</h5>
        <div className="grid md:grid-cols-2 gap-4 text-sm text-blue-800">
          <div>
            <h6 className="font-medium mb-1">Image Collection:</h6>
            <ul className="space-y-1">
              <li>• Take multiple angles of the same slope section</li>
              <li>• Include wide shots for context and close-ups for detail</li>
              <li>• Capture during optimal lighting conditions</li>
              <li>• Document temporal changes with periodic photos</li>
            </ul>
          </div>
          <div>
            <h6 className="font-medium mb-1">Analysis Optimization:</h6>
            <ul className="space-y-1">
              <li>• Include scale references (equipment, personnel)</li>
              <li>• Focus on areas of concern (cracks, overhangs)</li>
              <li>• Upload images in chronological order when possible</li>
              <li>• Limit to 8-10 images per analysis for best results</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};
