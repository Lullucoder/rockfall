import React, { useState } from 'react';
import { FileDown, Printer, Share2, Calendar, MapPin, AlertTriangle, Camera, Gauge } from 'lucide-react';
import { jsPDF } from 'jspdf';

interface ReportData {
  analysis: string;
  images: Array<{
    file: File;
    preview: string;
    id: string;
  }>;
  analysisType: 'detailed' | 'quick';
  riskLevel: string;
  timestamp: Date;
  location?: string;
  weatherConditions?: string;
  additionalNotes?: string;
}

interface EnhancedReportGeneratorProps {
  reportData: ReportData;
  onClose?: () => void;
}

export const EnhancedReportGenerator: React.FC<EnhancedReportGeneratorProps> = ({ 
  reportData, 
  onClose 
}) => {
  const [location, setLocation] = useState(reportData.location || '');
  const [weatherConditions, setWeatherConditions] = useState(reportData.weatherConditions || '');
  const [additionalNotes, setAdditionalNotes] = useState(reportData.additionalNotes || '');
  const [generating, setGenerating] = useState(false);

  const getRiskColor = (level: string) => {
    switch (level.toLowerCase()) {
      case 'critical': return 'text-red-600 bg-red-50 border-red-200';
      case 'high': return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'low': return 'text-green-600 bg-green-50 border-green-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const generateTextReport = () => {
    const reportContent = `
ROCKFALL RISK ASSESSMENT REPORT
=====================================

REPORT METADATA
---------------
Generated: ${reportData.timestamp.toLocaleString()}
Analysis Type: ${reportData.analysisType.toUpperCase()}
Images Analyzed: ${reportData.images.length}
Risk Level: ${reportData.riskLevel.toUpperCase()}
Location: ${location || 'Not specified'}
Weather Conditions: ${weatherConditions || 'Not specified'}

IMAGE FILES
-----------
${reportData.images.map((img, index) => 
  `${index + 1}. ${img.file.name} (${(img.file.size / 1024 / 1024).toFixed(2)} MB)`
).join('\n')}

GEOLOGICAL ANALYSIS
------------------
${reportData.analysis}

ADDITIONAL OBSERVATIONS
----------------------
${additionalNotes || 'None'}

RECOMMENDATIONS
--------------
Based on the analysis results, immediate attention should be given to areas identified as high or critical risk. 
Follow standard mining safety protocols and consider implementing additional monitoring measures as suggested 
in the analysis section.

NEXT STEPS
----------
1. Review analysis findings with site geologist
2. Implement immediate safety measures for critical risk areas
3. Schedule follow-up inspections based on risk level
4. Update mine safety protocols as necessary
5. Archive this report in the mine safety database

---
Report generated by AI-Based Rockfall Prediction and Alert System
For technical support, contact the mining safety team.
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `rockfall-assessment-${reportData.timestamp.toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const generatePDFReport = async () => {
    setGenerating(true);
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.width;
      const pageHeight = pdf.internal.pageSize.height;
      let yPosition = 20;

      // Header
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('ROCKFALL RISK ASSESSMENT REPORT', 20, yPosition);
      yPosition += 15;

      // Metadata section
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      pdf.text('REPORT METADATA', 20, yPosition);
      yPosition += 8;

      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(10);
      const metadata = [
        `Generated: ${reportData.timestamp.toLocaleString()}`,
        `Analysis Type: ${reportData.analysisType.toUpperCase()}`,
        `Images Analyzed: ${reportData.images.length}`,
        `Risk Level: ${reportData.riskLevel.toUpperCase()}`,
        `Location: ${location || 'Not specified'}`,
        `Weather: ${weatherConditions || 'Not specified'}`
      ];

      metadata.forEach(line => {
        pdf.text(line, 20, yPosition);
        yPosition += 5;
      });

      yPosition += 10;

      // Risk Level Indicator
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`RISK LEVEL: ${reportData.riskLevel.toUpperCase()}`, 20, yPosition);
      yPosition += 15;

      // Analysis section
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      pdf.text('GEOLOGICAL ANALYSIS', 20, yPosition);
      yPosition += 8;

      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(9);

      // Split analysis text into lines that fit the page
      const analysisLines = pdf.splitTextToSize(reportData.analysis, pageWidth - 40);
      analysisLines.forEach((line: string) => {
        if (yPosition > pageHeight - 20) {
          pdf.addPage();
          yPosition = 20;
        }
        pdf.text(line, 20, yPosition);
        yPosition += 4;
      });

      yPosition += 10;

      // Additional notes if any
      if (additionalNotes) {
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = 20;
        }

        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'bold');
        pdf.text('ADDITIONAL OBSERVATIONS', 20, yPosition);
        yPosition += 8;

        pdf.setFont('helvetica', 'normal');
        pdf.setFontSize(9);
        const notesLines = pdf.splitTextToSize(additionalNotes, pageWidth - 40);
        notesLines.forEach((line: string) => {
          if (yPosition > pageHeight - 20) {
            pdf.addPage();
            yPosition = 20;
          }
          pdf.text(line, 20, yPosition);
          yPosition += 4;
        });
      }

      // Add images if space permits
      if (reportData.images.length > 0 && reportData.images.length <= 4) {
        pdf.addPage();
        yPosition = 20;
        
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'bold');
        pdf.text('ANALYZED IMAGES', 20, yPosition);
        yPosition += 10;

        // Add up to 4 images per page
        for (let i = 0; i < Math.min(reportData.images.length, 4); i++) {
          const img = reportData.images[i];
          try {
            const imgElement = new Image();
            imgElement.src = img.preview;
            await new Promise((resolve) => {
              imgElement.onload = resolve;
            });

            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            if (ctx) {
              canvas.width = imgElement.width;
              canvas.height = imgElement.height;
              ctx.drawImage(imgElement, 0, 0);
              
              const imgData = canvas.toDataURL('image/jpeg', 0.7);
              const imgWidth = 80;
              const imgHeight = (imgElement.height / imgElement.width) * imgWidth;
              
              if (yPosition + imgHeight > pageHeight - 20) {
                pdf.addPage();
                yPosition = 20;
              }
              
              pdf.addImage(imgData, 'JPEG', 20, yPosition, imgWidth, imgHeight);
              pdf.setFontSize(8);
              pdf.text(img.file.name, 20, yPosition + imgHeight + 5);
              yPosition += imgHeight + 15;
            }
          } catch (error) {
            console.error('Error adding image to PDF:', error);
          }
        }
      }

      // Footer
      pdf.setFontSize(8);
      pdf.setFont('helvetica', 'italic');
      const footerText = 'Generated by AI-Based Rockfall Prediction and Alert System';
      pdf.text(footerText, pageWidth / 2 - pdf.getTextWidth(footerText) / 2, pageHeight - 10);

      pdf.save(`rockfall-assessment-${reportData.timestamp.toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF report. Please try again.');
    } finally {
      setGenerating(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-navy-100 rounded-lg">
                <FileDown className="w-6 h-6 text-navy-600" />
              </div>
              <div>
                <h2 className="text-xl font-semibold text-gray-900">Generate Analysis Report</h2>
                <p className="text-sm text-gray-600">Export comprehensive rockfall risk assessment</p>
              </div>
            </div>
            {onClose && (
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-gray-600"
              >
                Ã—
              </button>
            )}
          </div>

          {/* Report Summary */}
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Calendar className="w-4 h-4 text-gray-500" />
                  <span className="text-sm">Generated: {reportData.timestamp.toLocaleString()}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Camera className="w-4 h-4 text-gray-500" />
                  <span className="text-sm">Images: {reportData.images.length}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Gauge className="w-4 h-4 text-gray-500" />
                  <span className="text-sm">Analysis: {reportData.analysisType}</span>
                </div>
              </div>
              <div className="flex items-start">
                <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${getRiskColor(reportData.riskLevel)}`}>
                  <AlertTriangle className="w-4 h-4 mr-1" />
                  Risk: {reportData.riskLevel.toUpperCase()}
                </div>
              </div>
            </div>
          </div>

          {/* Report Customization */}
          <div className="space-y-4 mb-6">
            <h3 className="text-lg font-medium text-gray-900">Report Details</h3>
            
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  <MapPin className="w-4 h-4 inline mr-1" />
                  Location/Zone
                </label>
                <input
                  type="text"
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  placeholder="e.g., North Bench Level 1200m"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-navy-500 focus:border-transparent"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Weather Conditions
                </label>
                <input
                  type="text"
                  value={weatherConditions}
                  onChange={(e) => setWeatherConditions(e.target.value)}
                  placeholder="e.g., Clear, 15Â°C, No recent rainfall"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-navy-500 focus:border-transparent"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Additional Observations
              </label>
              <textarea
                value={additionalNotes}
                onChange={(e) => setAdditionalNotes(e.target.value)}
                placeholder="Any additional context, observations, or notes..."
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-navy-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* Export Options */}
          <div className="border-t pt-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Export Options</h3>
            
            <div className="grid md:grid-cols-3 gap-4">
              <button
                onClick={generateTextReport}
                className="flex items-center justify-center space-x-2 p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <FileDown className="w-5 h-5 text-gray-600" />
                <div className="text-center">
                  <div className="font-medium text-gray-900">Text Report</div>
                  <div className="text-sm text-gray-500">Plain text format</div>
                </div>
              </button>

              <button
                onClick={generatePDFReport}
                disabled={generating}
                className="flex items-center justify-center space-x-2 p-4 bg-navy-600 text-white rounded-lg hover:bg-navy-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Printer className="w-5 h-5" />
                <div className="text-center">
                  <div className="font-medium">PDF Report</div>
                  <div className="text-sm opacity-75">
                    {generating ? 'Generating...' : 'Professional format'}
                  </div>
                </div>
              </button>

              <button
                onClick={() => {
                  const exportData = {
                    analysis: reportData.analysis,
                    images: reportData.images.length,
                    location,
                    weather: weatherConditions,
                    notes: additionalNotes
                  };
                  navigator.clipboard.writeText(JSON.stringify(exportData, null, 2));
                  alert('Report data copied to clipboard');
                }}
                className="flex items-center justify-center space-x-2 p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <Share2 className="w-5 h-5 text-gray-600" />
                <div className="text-center">
                  <div className="font-medium text-gray-900">Copy Data</div>
                  <div className="text-sm text-gray-500">JSON format</div>
                </div>
              </button>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex justify-end space-x-3 mt-6 pt-6 border-t">
            {onClose && (
              <button
                onClick={onClose}
                className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200"
              >
                Close
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
